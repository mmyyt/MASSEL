<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 25 Nov 2024 00:35:42 GMT</lastBuildDate><item><title><![CDATA[What's new in Spring Modulith 1.3?]]></title><link>https://spring.io/blog/2024/11/22/whats-new-in-spring-modulith-1-3</link><guid isPermaLink="true">https://spring.io/blog/2024/11/22/whats-new-in-spring-modulith-1-3</guid><dc:creator><![CDATA[odrotbohm]]></dc:creator><pubDate>Fri, 22 Nov 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;After half a year of development, Spring Modulith 1.3 GA &lt;a href=&quot;http://spring.io/blog/2024/11/22/spring-modulith-1-3-ga-released&quot;&gt;has been released&lt;/a&gt;.
It is packed with new features, improvements, and ? best of all ? community contributions.
Let me walk you through some of the most interesting ones.&lt;/p&gt;
&lt;h2 id=&quot;baseline-upgrades&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#baseline-upgrades&quot; aria-label=&quot;baseline upgrades permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Baseline Upgrades&lt;/h2&gt;
&lt;p&gt;As usual, a new minor version of Spring Modulith upgrades to the latest releases of both Spring Boot and Spring Framework, &lt;a href=&quot;https://spring.io/blog/2024/11/21/spring-boot-3-4-0-available-now&quot;&gt;3.4&lt;/a&gt; and &lt;a href=&quot;https://spring.io/blog/2024/11/14/spring-framework-6-2-0-available-now&quot;&gt;6.2&lt;/a&gt; respectively.
That said, we still remain compatible with the previous generations of each of them so that you can selectively upgrade to Spring Modulith 1.3 without having to the latest Boot and Framework versions.&lt;/p&gt;
&lt;h2 id=&quot;the-application-module-model&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-application-module-model&quot; aria-label=&quot;the application module model permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Application Module Model&lt;/h2&gt;
&lt;h3 id=&quot;nested-application-modules&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#nested-application-modules&quot; aria-label=&quot;nested application modules permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nested Application Modules&lt;/h3&gt;
&lt;p&gt;Spring Modulith&apos;s core abstractions have been significantly revamped internally to enable support for some cool new features.
An application module can now contain nested ones that are hidden from other, sibling-level modules.
This adds another level of means to structure your applications.
Nested application modules are declared by using Spring Modulith&apos;s &lt;code&gt;@ApplicationModule&lt;/code&gt; (or jMolecules&apos; &lt;code&gt;@Module&lt;/code&gt;) on packages nested inside the base packages of modules discovered by the defined detection strategy.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;? Example
戌式 ? src/main/java
   |
   戍式 ? example
   |  戌式 ? Application.java
   |
   |  -&gt; Inventory
   |
   戍式 ? example.inventory
   |  戍式 ? InventoryManagement.java
   |  戌式 ? SomethingInventoryInternal.java
   戍式 ? example.inventory.internal
   |  戌式 ? SomethingInventoryInternal.java
   |
   |  -&gt; Inventory &gt; Nested
   |
   戍式 ? example.inventory.nested
   |  戍式 ? package-info.java // @ApplicationModule
   |  戌式 ? NestedApi.java
   戍式 ? example.inventory.nested.internal
   |  戌式 ? NestedInternal.java
   |
   |  -&gt; Order
   |
   戌式 ? example.order
      戍式 ? OrderManagement.java
      戌式 ? SomethingOrderInternal.java
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, &lt;code&gt;inventory&lt;/code&gt; is an application module as described &lt;a href=&quot;https://docs.spring.io/spring-modulith/reference/fundamentals.html#modules.simple&quot;&gt;in the reference documentation&lt;/a&gt;.
The &lt;code&gt;@ApplicationModule&lt;/code&gt; annotation on the &lt;code&gt;nested&lt;/code&gt; package caused that to become a nested application module in turn.
In that arrangement, the following access rules apply:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The code in &lt;em&gt;Nested&lt;/em&gt; is only available from &lt;em&gt;Inventory&lt;/em&gt; or any types exposed by sibling application modules nested inside &lt;em&gt;Inventory&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Any code in the &lt;em&gt;Nested&lt;/em&gt; module can access code in parent modules, even internal. I.e., both &lt;code&gt;NestedApi&lt;/code&gt; and &lt;code&gt;NestedInternal&lt;/code&gt; can access &lt;code&gt;inventory.internal.SomethingInventoryInternal&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code from nested modules can also access exposed types by top-level application modules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any code in &lt;code&gt;nested&lt;/code&gt; (or any sub-packages) can access &lt;code&gt;OrderManagement&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;external-application-modules&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#external-application-modules&quot; aria-label=&quot;external application modules permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;External Application Modules&lt;/h3&gt;
&lt;p&gt;Spring Modulith&apos;s default application module detection strategy assumes all application modules living in the same package namespace.
Until now, adding other packages to the arrangement had only been possible by knowing the packages to include in advance and configuring them in &lt;code&gt;@Modulithic(additionalPackages = &quot;’&quot;&lt;/code&gt;.
With version 1.3, we introduce an SPI &lt;code&gt;ApplicationModuleSourceFactory&lt;/code&gt; that can be registered via &lt;code&gt;META-INF/spring.factories&lt;/code&gt; and used to declare root packages to scan, explicit application module base packages and optionally customize the application module detection strategy to be used for the declared root package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package example;

public class CustomApplicationModuleSourceFactory implements ApplicationModuleSourceFactory {

  @Override
  public List&amp;#x3C;String&gt; getRootPackages() {
    return List.of(&quot;com.acme.toscan&quot;);
  }

  @Override
  public ApplicationModuleDetectionStrategy getApplicationModuleDetectionStrategy() {
    return ApplicationModuleDetectionStrategy.explicitlyAnnotated();
  }

  @Override
  public List&amp;#x3C;String&gt; getModuleBasePackages() {
    return List.of(&quot;com.acme.module&quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example would use &lt;code&gt;com.acme.toscan&lt;/code&gt; to detect explicitly declared modules within that and also create an application module from &lt;code&gt;com.acme.module&lt;/code&gt;.
The package names returned from these will subsequently be translated into &lt;code&gt;ApplicationModuleSource&lt;/code&gt;s via the corresponding &lt;code&gt;getApplicationModuleSource(’)&lt;/code&gt; flavors exposed in &lt;code&gt;ApplicationModuleDetectionStrategy&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;integration-testing&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#integration-testing&quot; aria-label=&quot;integration testing permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration Testing&lt;/h2&gt;
&lt;p&gt;Optimizing the execution of integration test has always been a core feature of Spring Modulith.
Application modules can be bootstrapped individually or in varying degrees of collaboration using the &lt;code&gt;@ApplicationModuleTest&lt;/code&gt; annotation.&lt;/p&gt;
&lt;p&gt;In 1.3, we extend that support with a JUnit Jupiter extension, that will analyze the changes made to your application and, for a test run, only select the integration tests for execution that really need to be executed.
By default, we consider uncommitted changes and commits on top of your current branch&apos;s tracking branch.
To optimize test execution on CI systems, the extension can be given a commit hash -- usually the one from the latest successfully built commit -- to act as reference to calculate the changed files to consider.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.spring.io/blog/odrotbohm/241122/junit-selective-execution.png&quot; alt=&quot;Some console output showing tests being skipped that would test functionality not affected by the current changes made to the repository&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the tests that are not affected by the changes made to the project are skipped.
Big thanks to &lt;a href=&quot;https://github.com/lukasdo&quot;&gt;Lukas Dohmen&lt;/a&gt; and &lt;a href=&quot;https://github.com/davidbilge&quot;&gt;David Bilge&lt;/a&gt; who contributed this feature.&lt;/p&gt;
&lt;p&gt;Another minor, but useful, addition in the area of integration testing support is that &lt;code&gt;@ApplicationModuleTest&lt;/code&gt; now supports defining the module to be executed explicitly via its newly introduced &lt;code&gt;module&lt;/code&gt; attribute.
This allows integration tests to be located outside the application module&apos;s package space and was also contributed by Lukas.&lt;/p&gt;
&lt;h2 id=&quot;event-publication-registry&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#event-publication-registry&quot; aria-label=&quot;event publication registry permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Event Publication Registry&lt;/h2&gt;
&lt;h3 id=&quot;application-event-publication-modes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#application-event-publication-modes&quot; aria-label=&quot;application event publication modes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Application Event Publication Modes&lt;/h3&gt;
&lt;p&gt;Spring Modulith 1.3 ships a ton of new features in its event publication support.
First and foremost, we ship two new completion modes configurable via the &lt;code&gt;spring.modulith.events.completion-mode&lt;/code&gt; property.
The first new completion mode (&lt;code&gt;delete&lt;/code&gt;) deletes publications right away instead of setting the completion date.
This means the number of entries in the registry stays small, and thus imposes less of a performance overhead in systems with a significant number of events being published.&lt;/p&gt;
&lt;p&gt;Deleting publications on completion right away comes with the drawback of not being able to access them, for example for statistical purposes.
That is why we also added an archiving (&lt;code&gt;archive&lt;/code&gt;) mode that maintains a dedicated publication archive that the completed publications will be moved to.
This yields the same performance improvements on event publication but retains completed publications separately.&lt;/p&gt;
&lt;h3 id=&quot;completing-event-publications-by-identifier&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#completing-event-publications-by-identifier&quot; aria-label=&quot;completing event publications by identifier permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Completing Event Publications by Identifier&lt;/h3&gt;
&lt;p&gt;Until now, event publications have been completed by decorating the transactional application listeners.
That means the completing code only had access to the raw application event consumed and the identifier of the listener, and not the identifier of the individual publication.&lt;/p&gt;
&lt;p&gt;In Spring Modulith 1.3, the Event Publication Registry keeps track of the currently in progress event publications and thus allows us to issue publication completions referring to the publication&apos;s identifier.
This allows the individual backing store implementations to significantly improve the performance of the completion operation, as indexes can be used more effectively.&lt;/p&gt;
&lt;h3 id=&quot;more-databases-and-schema-support-for-relational-databases&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#more-databases-and-schema-support-for-relational-databases&quot; aria-label=&quot;more databases and schema support for relational databases permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;More Databases and Schema Support for Relational Databases&lt;/h3&gt;
&lt;p&gt;The relational database backend of the Event Publication Registry now supports three additional databases, namely MariaDB, Oracle DB and Microsoft SQL Server.
Also, a schema to be used for both the DDL execution and general operation can be defined for databases that support schemas.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;spring.modulith.republish-outstanding-events-on-restart&lt;/code&gt; has been deprecated in favor of the newly introduced &lt;code&gt;spring.modulith.events.republish-outstanding-events-on-restart&lt;/code&gt; for consistency reasons.&lt;/p&gt;
&lt;h3 id=&quot;event-externalization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#event-externalization&quot; aria-label=&quot;event externalization permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Event externalization&lt;/h3&gt;
&lt;p&gt;Spring Modulith&apos;s support to easily externalize application events into other systems ships with quite a few new features as well.
Messages sent out can now get headers associated with them.
To achieve that, &lt;code&gt;EventExternalizingConfiguration&lt;/code&gt; now exposes &lt;a href=&quot;https://docs.spring.io/spring-modulith/reference/events.html#externalization.api&quot;&gt;various &lt;code&gt;headers(’)&lt;/code&gt; methods&lt;/a&gt; that allow registering custom extractors for events in general or per event type specifically.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration
class MyConfiguration {

  @Bean
  EventExternalizingConfiguration config(SomeBean bean) {

    return EventExternalizingConfiguration.defaults(’)
        .headers(event -&gt; Map.of(&quot;signature&quot;, bean.signMessage(event)))
        .build();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To dynamically calculate the routing target for externalized events, &lt;code&gt;@Externalized&lt;/code&gt; now supports SpEL expressions to define those, in addition to the previously already supported dynamic routing keys.&lt;/p&gt;
&lt;p&gt;Our good friend &lt;a href=&quot;https://github.com/joshlong&quot;&gt;Josh Long&lt;/a&gt; contributed a new externalizing adapter to write events into Spring&apos;s &lt;code&gt;MessageChannel&lt;/code&gt; abstraction.
That interface is implemented by Spring Integration&apos;s message channels so that you can now seamlessly feed application events into those if needed.&lt;/p&gt;
&lt;p&gt;The support for event externalization into Amazon SQS and SNS has been moved into the current releases of Spring Cloud for AWS (thanks &lt;a href=&quot;https://github.com/maciejwalkowiak&quot;&gt;Maciej Walkowiak&lt;/a&gt; for that).
As a consequence, we formally deprecate our own implementations in favor of theirs, which are copies of the Spring Modulith native implementations and should be a drop-in replacement.
We plan to remove our artifacts with the 2.0 release coming up next year.&lt;/p&gt;
&lt;h2 id=&quot;documentation-support&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#documentation-support&quot; aria-label=&quot;documentation support permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation Support&lt;/h2&gt;
&lt;p&gt;Our documentation support ships with a few interesting features as well.
For one, thanks to Cora Iberkleid, the default documentation generation process produces an aggregating document containing all individual artifacts created, for convenient preview.
That document will be generated whenever you use one of the &lt;code&gt;writeDocumentation(’)&lt;/code&gt; flavors of &lt;code&gt;Documenter&lt;/code&gt;.
Alternatively, call &lt;code&gt;writeAggregatingDocument(’)&lt;/code&gt; explicitly after you have triggered the generation of individual diagrams and Application Module Canvases selectively.&lt;/p&gt;
&lt;p&gt;The Canvases conveniently lay out all the pieces of code of an application module that constitutes its surface.
We have always provided the option for that Canvas to include Javadoc present on the types and methods (for event listeners) through the integration of third-party libraries and a pretty involved build setup.
With 1.3, we now ship an annotation processor (in &lt;code&gt;spring-modulith-apt&lt;/code&gt;) that automatically extracts the Javadoc of your codebase into a reusable JSON document and the Canvas generation has been updated to transparently use that if present.
It is now automatically included by the &lt;code&gt;spring-modulith-starter-core&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;third-party-integration&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#third-party-integration&quot; aria-label=&quot;third party integration permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Third-party integration&lt;/h2&gt;
&lt;p&gt;Finally, for convenience, we now trigger the &lt;a href=&quot;https://github.com/xmolecules/jmolecules-integrations/tree/main/jmolecules-archunit&quot;&gt;ArchUnit-based&lt;/a&gt; architectural verifications, such as the ones for &lt;a href=&quot;https://github.com/xmolecules/jmolecules?tab=readme-ov-file#use-case-expressing-architectural-concepts&quot;&gt;Hexagonal-, Onion- or Layered Architecture&lt;/a&gt;, provided by jMolecules automatically if present on the classpath.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Modulith 1.3 GA released]]></title><link>https://spring.io/blog/2024/11/22/spring-modulith-1-3-ga-released</link><guid isPermaLink="true">https://spring.io/blog/2024/11/22/spring-modulith-1-3-ga-released</guid><dc:creator><![CDATA[odrotbohm]]></dc:creator><pubDate>Fri, 22 Nov 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the community, I am delighted to announce the avability of Spring Modulith &lt;a href=&quot;https://github.com/spring-projects/spring-modulith/releases/tag/1.3.0&quot;&gt;1.3 GA&lt;/a&gt;.
After 6 months of development, the release ships with the following highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upgrades to Spring Boot 3.4 and Spring Framework 6.2.&lt;/li&gt;
&lt;li&gt;Support for nested application modules and external application module contributions.&lt;/li&gt;
&lt;li&gt;Optimized integration test execution via a JUnit Jupiter extension.&lt;/li&gt;
&lt;li&gt;New deleting and archiving event publication completion modes.&lt;/li&gt;
&lt;li&gt;By-ID event publication completion significantly improving performance.&lt;/li&gt;
&lt;li&gt;Support for MariaDB, Oracle DB and Microsoft SQL Server in the JDBC-based Event Publication Registry.&lt;/li&gt;
&lt;li&gt;Event externalization into Spring&apos;s &lt;code&gt;MessageChannel&lt;/code&gt; abstraction to, for example trigger Spring Integration flows.&lt;/li&gt;
&lt;li&gt;Automatic Javadoc extraction for inclusion in the generated Application Module Canvases.&lt;/li&gt;
&lt;li&gt;An aggregating document for all documentation generated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a more detailed overview about the release checkout the &lt;a href=&quot;https://spring.io/blog/2024/11/22/whats-new-in-spring-modulith-1-3&quot;&gt;What&apos;s new in Spring Modulith 1.3?&lt;/a&gt; blog post we have just published.&lt;/p&gt;
&lt;p&gt;On top of the GA release we also shipped &lt;a href=&quot;https://github.com/spring-projects/spring-modulith/releases/tag/1.2.6&quot;&gt;1.2.6&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-modulith/releases/tag/1.1.11&quot;&gt;1.1.11&lt;/a&gt;, containing primarily dependency upgrades and bug fixes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Bootiful Podcast: Heroku's Terence Lee]]></title><link>https://spring.io/blog/2024/11/21/a-bootiful-podcast-terence-lee</link><guid isPermaLink="true">https://spring.io/blog/2024/11/21/a-bootiful-podcast-terence-lee</guid><dc:creator><![CDATA[joshlong]]></dc:creator><pubDate>Thu, 21 Nov 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! Happy Spring Boot 3.4.0 release day to those who celebrate! Today I&apos;m joined by both Terence Lee, from Heroku, and my friend DaShaun Carter, and we talk about platforms, buildpacks, and more. #heroku #paas #buildpacks,&lt;/p&gt;
&lt;iframe title=&quot;Heroku＊s Terence Lee&quot; allowtransparency=&quot;true&quot; height=&quot;300&quot; width=&quot;100%&quot; style=&quot;border: none; min-width: min(100%, 430px);height:300px;&quot; scrolling=&quot;no&quot; data-name=&quot;pb-iframe-player&quot; src=&quot;https://www.podbean.com/player-v2/?from=embed&amp;i=wzxh7-174963a-pb&amp;square=1&amp;share=1&amp;download=1&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;rtl=0&amp;logo_link=&amp;btn-skin=7&amp;size=300&quot; loading=&quot;lazy&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 2.7.23, 3.0.18, and 3.1.14 available now]]></title><link>https://spring.io/blog/2024/11/21/spring-boot-2-7-23-3-0-18-and-3-1-14-available-now</link><guid isPermaLink="true">https://spring.io/blog/2024/11/21/spring-boot-2-7-23-3-0-18-and-3-1-14-available-now</guid><dc:creator><![CDATA[wilkinsona]]></dc:creator><pubDate>Thu, 21 Nov 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team, I am pleased to announce that Spring Boot 2.7.23, 3.0.18, and 3.1.14 have been released for &lt;a href=&quot;https://www.vmware.com/products/app-platform/tanzu-spring&quot;&gt;support&lt;/a&gt; customers. The releases are available from &lt;a href=&quot;https://packages.broadcom.com&quot;&gt;https://packages.broadcom.com&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot &lt;a href=&quot;https://enterprise.spring.io/projects/spring-boot/changelog/2.7.23&quot;&gt;2.7.23&lt;/a&gt; ships with 15 bug fixes, dependency upgrades, and documentation improvements.&lt;/li&gt;
&lt;li&gt;Spring Boot &lt;a href=&quot;https://enterprise.spring.io/projects/spring-boot/changelog/3.0.18&quot;&gt;3.0.18&lt;/a&gt; ships with 28 bug fixes, dependency upgrades, and documentation improvements.&lt;/li&gt;
&lt;li&gt;Spring Boot &lt;a href=&quot;https://enterprise.spring.io/projects/spring-boot/changelog/3.1.14&quot;&gt;3.1.14&lt;/a&gt; ships with 34 bug fixes, dependency upgrades, and documentation improvements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next 2.7.x, 3.0.x, and 3.1.x releases for support customers are planned for 3 months&apos; time.
The first 3.2.x release for support customers is also planned for 3 months&apos; time.&lt;/p&gt;</content:encoded></item></channel></rss>